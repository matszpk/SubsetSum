####
# CMakeLists.txt - maker for program
# Mateusz Szpakowski
####

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(SubsetSum)

SET(SUBSETSUM_VERSION 0.1.0)
SET(SUBSETSUM_MAJOR_VERSION 0)
SET(SUBSETSUM_MINOR_VERSION 1)
SET(SUBSETSUM_MICRO_VERSION 0)

ENABLE_LANGUAGE(CXX)

#####
# packacing
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Simple SubsetSum Solver")
SET(CPACK_PACKAGE_VENDOR "matszpk")
SET(CPACK_PACKAGE_MAINTAINER "matszpk")
SET(CPACK_PACKAGE_VERSION_MAJOR ${SUBSETSUM_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${SUBSETSUM_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${SUBSETSUM_MICRO_VERSION})

INCLUDE(CPack)
######
## end packaging

INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckCXXCompilerFlag)

IF(NOT LIB_INSTALL_DIR)
    IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        SET(LIB_INSTALL_DIR "lib64")
    ELSE(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        SET(LIB_INSTALL_DIR "lib")
    ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
    MESSAGE("Using library install dirname ${LIB_INSTALL_DIR}")
ENDIF(NOT LIB_INSTALL_DIR)

SET(CMAKE_CXX_FLAGS_DEBUG "-Wall -g -O0 -DDEBUG=1")
#SET(CMAKE_CXX_FLAGS_RELEASE "-Wall -O3 -funroll-loops -fomit-frame-pointer")
SET(CMAKE_CXX_FLAGS_RELEASE "-Wall -O2 -fomit-frame-pointer")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Wall -g -O2 -funroll-loops -DDEBUG=1")
SET(CMAKE_CXX_FLAGS_RELWITHPROFILE "-Wall -g -O2 -pg -funroll-loops")

IF(${PROJECT_SOURCE_DIR} MATCHES ${PROJECT_BINARY_DIR})
    MESSAGE("Please do an out-of-tree build:")
    MESSAGE("rm -f CMakeCache.txt; mkdir -p default; cd default; cmake ..; make")
    MESSAGE(FATAL_ERROR "in-tree-build detected")
ENDIF(${PROJECT_SOURCE_DIR} MATCHES ${PROJECT_BINARY_DIR})

OPTION(NO_STATIC "Disable static during compiling" OFF)
OPTION(NO_OPENCL "Do not use OpenCL libraries" OFF)

FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(GLIBMM REQUIRED glibmm-2.4)
PKG_CHECK_MODULES(GTHREAD REQUIRED gthread-2.0)

####
# OpenCL find
####
SET(OPENCL_DIST_DIR "" CACHE PATH "OpenCL Distribution directory")

IF(NOT NO_OPENCL)
    IF(NOT OPENCL_DIST_DIR)
        IF(EXISTS /opt/AMDAPP)
            SET(OPENCL_DIST_DIR "/opt/AMDAPP")
            MESSAGE(STATUS "OpenCL AMDAPP found")
        ELSEIF(EXISTS /usr/local/cuda)
            SET(OPENCL_DIST_DIR "/usr/local/cuda")
            MESSAGE(STATUS "OpenCL CUDA found.")
        ELSEIF(EXISTS /usr/include/CL)
            SET(OPENCL_DIST_DIR "/usr")
            MESSAGE(STATUS "Standard OpenCL found.")
        ENDIF(EXISTS /opt/AMDAPP)
    ENDIF(NOT OPENCL_DIST_DIR)

    IF (OPENCL_DIST_DIR)
        SET(OPENCL_LIBRARY_DIRS "")
        SET(OPENCL_CFLAGS
            "-I${OPENCL_DIST_DIR}/include -DHAVE_OPENCL=1 -D__CL_ENABLE_EXCEPTIONS=1")
        SET(OPENCL_LIBRARIES "OpenCL")
        SET(HAVE_OPENCL 1)
    ENDIF(OPENCL_DIST_DIR)
    
    # check for AMDAPP lib/x86 or lib/x86_64 libOpenCL.so file
    IF(HAVE_OPENCL)
        IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            IF(EXISTS ${OPENCL_DIST_DIR}/lib/x86_64/libOpenCL.so)
                SET(OPENCL_LIBRARY_DIRS "/opt/AMDAPP/lib/x86_64")
            ENDIF(EXISTS ${OPENCL_DIST_DIR}/lib/x86_64/libOpenCL.so)
        ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "i386" OR
               CMAKE_SYSTEM_PROCESSOR STREQUAL "i486" OR
               CMAKE_SYSTEM_PROCESSOR STREQUAL "i586" OR
               CMAKE_SYSTEM_PROCESSOR STREQUAL "i686" OR
               CMAKE_SYSTEM_PROCESSOR STREQUAL "x86")
            IF(EXISTS ${OPENCL_DIST_DIR}/lib/x86/libOpenCL.so)
                SET(OPENCL_LIBRARY_DIRS "/opt/AMDAPP/lib/x86")
            ENDIF(EXISTS ${OPENCL_DIST_DIR}/lib/x86/libOpenCL.so)
        ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    ENDIF(HAVE_OPENCL)

ENDIF(NOT NO_OPENCL)
###
# end of OpenCL config
###

IF(HAVE_OPENCL)
    MESSAGE(STATUS "OpenCL found")
    MESSAGE(STATUS "OpenCL library dirs: " ${OPENCL_LIBRARY_DIRS})
    MESSAGE(STATUS "OpenCL libraries: " ${OPENCL_LIBRARIES})
    MESSAGE(STATUS "OpenCL CFLAGS: " ${OPENCL_CFLAGS})
ELSE(HAVE_OPENCL)
    MESSAGE(STATUS "OpenCL not found")
ENDIF(HAVE_OPENCL)

PKG_CHECK_MODULES(POPT REQUIRED popt)

SET(ADDITIONAL_LIBRARIES "m")

OPTION(BUILD_TESTS "Compile tests" OFF)

IF(BUILD_TESTS)
    ENABLE_TESTING()
    PKG_CHECK_MODULES(CPPUNIT REQUIRED cppunit)
ENDIF(BUILD_TESTS)

TRY_COMPILE(HAVE_INT128 ${PROJECT_BINARY_DIR} ${PROJECT_SOURCE_DIR}/Int128Detect.c)

IF(HAVE_INT128)
    SET(INT128_DEFINITIONS -DHAVE_INT128=1)
    MESSAGE(STATUS "Int128 detected")
ENDIF(HAVE_INT128)

CHECK_CXX_COMPILER_FLAG(-msse2 HAVE_SSE2)
CHECK_CXX_COMPILER_FLAG(-msse4.1 HAVE_SSE4)

IF(HAVE_SSE4)
    SET(CPU_EXT_DEFS -DHAVE_SSE2=1 -DHAVE_SSE4=1)
    MESSAGE(STATUS "SSE4 detected in compiler")
ELSE(HAVE_SSE2)
    SET(CPU_EXT_DEFS -DHAVE_SSE2=1)
    MESSAGE(STATUS "SSE2 detected in compiler")
ENDIF(HAVE_SSE4)

ADD_DEFINITIONS(${GLIBMM_CFLAGS} ${GTHREAD_CFLAGS}
        ${OPENCL_CFLAGS} ${POPT_CFLAGS} -D__STDC_FORMAT_MACROS=1 ${INT128_DEFINITIONS}
        ${CPU_EXT_DEFS})

LINK_DIRECTORIES(${GLIBMM_LIBRARY_DIRS} ${GTHREAD_LIBRARY_DIRS}
        ${CPPUNIT_LIBRARY_DIRS} ${OPENCL_LIBRARY_DIRS} ${POPT_LIBRARY_DIRS})

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src)
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/src)
